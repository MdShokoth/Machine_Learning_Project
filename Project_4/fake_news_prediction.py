# -*- coding: utf-8 -*-
"""Fake_news_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gnOYKm4iCSHcnb9U85q5wXeCACf_oMx3
"""

import pandas as pd
import numpy as np
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix,ConfusionMatrixDisplay

import nltk
nltk.download('stopwords')
print(stopwords.words('english'))

df=pd.read_csv("/content/train.csv")

df.head()

df.shape

df.isnull().sum()

df=df.fillna('')

df.isnull().sum()

df['content']=df['author']+" "+df['title']
df.head()

port_stem=PorterStemmer()
def stemming(content):
  stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  stemmed_content=' '.join(stemmed_content)
  return stemmed_content

df['content']=df['content'].apply(stemming)

print(df['content'])

X=df['content'].values
Y=df['label'].values

vectorizer=TfidfVectorizer()
vectorizer.fit(X)
X=vectorizer.transform(X)
print(X)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

model=LogisticRegression()
model.fit(X_train,Y_train)

#accuracy of training data
Y_train_predict=model.predict(X_train)
print("Accuracy Score of training data:",accuracy_score(Y_train_predict,Y_train))

#accuracy of testing data
Y_test_predict=model.predict(X_test)
print("Accuracy Score of testing data:",accuracy_score(Y_test_predict,Y_test))

#confusion matrix
cm=confusion_matrix(Y_test_predict,Y_test)
print(cm)

from matplotlib import pyplot as plt
#cm_display=ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=[False,True])
cm_display=ConfusionMatrixDisplay(cm)
cm_display.plot()
plt.show()

print(Y_test[2])

sample_data=X_test[2]
print(model.predict(sample_data))
if(model.predict(sample_data)==0):
  print("Fake News")
else:
  print("Real News")

