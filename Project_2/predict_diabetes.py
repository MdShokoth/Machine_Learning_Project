# -*- coding: utf-8 -*-
"""Predict_Diabetes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oTKxtinH01keR6qLlXJTk0-peCuTesAe
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

df=pd.read_csv("/content/diabetes.csv")

df.head()

df.shape

df.describe()

df["Outcome"].value_counts()

df.groupby("Outcome").mean()

scaler=StandardScaler()

X=scaler.fit_transform(df.drop("Outcome",axis=1))
Y=df["Outcome"]

print(X)
print(Y)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)
print(X.shape,X_train.shape,X_test.shape)

classifier=SVC(kernel="linear")

classifier.fit(X_train,Y_train)

y_train_predict=classifier.predict(X_train)
#accuracy_score for train data
print("Accuracy_Score:",accuracy_score(y_train_predict,Y_train))

y_test_predict=classifier.predict(X_test)
#accuracy_score for train data
print("Accuracy_Score:",accuracy_score(y_test_predict,Y_test))

sample_data=[10,168,74,0,0,38,0.537,34]
sample_data=np.asarray(sample_data).reshape(1,-1)
sample_data=scaler.transform(sample_data)
prediction=classifier.predict(sample_data)
print(prediction)
if prediction[0]==0:
  print("Non-Diabetic")
else:
  print("Diabetic")

